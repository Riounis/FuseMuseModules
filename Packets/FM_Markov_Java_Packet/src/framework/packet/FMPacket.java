package framework.packet;

import java.util.Collection;

import javax.swing.tree.DefaultMutableTreeNode;

import framework.ds.FMComposition;
import jm.music.data.Part;

/**
 * Interface to be used by Packets that are meant to be
 * compatible with FuseMuse's Shell.
 * 
 * @author Sam Rappl
 * @version 2.0
 */
public interface FMPacket {
	
	/**
	 * ExecuteMelody generates a melody line played on a single
	 * instrument and returns it to the Shell to be added to the score
	 * 
	 * @param composition an FMComposition object, which contains the rhythmic
	 *                    baseline, chord progression, key, time signature, 
	 *                    and tempo of the piece. Also contains the score, 
	 *                    which contains previously constructed melodies,
	 *                    harmonies for those melodies, and
	 *                    supporting parts for those melodies.
	 * @param currentExecutionNode:	The tree node from which this packet is being executed.
	 * 								Contains a PacketPart object, which contains useful
	 * 								information about the composition at each tree node.  
	 * 
	 * @return Part the part generated by the packet.
	 */
	public Collection<Part> executeMelody(FMComposition composition, DefaultMutableTreeNode currentExecutionNode);
	
	/**
	 * ExecuteHarmony generates a harmonic line played on a single
	 * instrument and returns it to the Shell to be added to the score.
	 * 
	 * @param composition an FMComposition object, which contains the rhythmic
	 *                    baseline, chord progression, key, time signature, 
	 *                    and tempo of the piece. Also contains the score, 
	 *                    which contains previously constructed melodies,
	 *                    harmonies for those melodies, and
	 *                    supporting parts for those melodies,
	 *                    as well as the parent melody of the
	 *                    harmonic part to be generated.
	 * @param currentExecutionNode:	The tree node from which this packet is being executed.
	 * 								Contains a PacketPart object, which contains useful
	 * 								information about the composition at each tree node.
	 * 
	 * @return Part the part generated by the packet.
	 */
	public Collection<Part> executeHarmony(FMComposition composition, DefaultMutableTreeNode currentExecutionNode);
	
	/**
	 * ExecuteSupport generates a supporting line played on a single
	 * instrument and returns it to the Shell to be added to the score
	 * 
	 * @param composition an FMComposition object, which contains the rhythmic
	 *                    baseline, chord progression, key, time signature, 
	 *                    and tempo of the piece. Also contains the score, 
	 *                    which contains previously constructed melodies,
	 *                    harmonies for those melodies, and
	 *                    supporting parts for those melodies,
	 *                    as well as the parent melody of the
	 *                    supporting part to be generated.
	 * @param currentExecutionNode:	The tree node from which this packet is being executed.
	 * 								Contains a PacketPart object, which contains useful
	 * 								information about the composition at each tree node.
	 * 
	 * @return Part the part generated by the packet.
	 */
	public Collection<Part> executeSupport(FMComposition composition, DefaultMutableTreeNode currentExecutionNode);
}
